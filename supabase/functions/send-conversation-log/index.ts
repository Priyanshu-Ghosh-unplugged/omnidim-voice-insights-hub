
import { serve } from "https://deno.land/std@0.190.0/http/server.ts";

const corsHeaders = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Headers": "authorization, x-client-info, apikey, content-type",
};

interface ConversationLogRequest {
  conversations: Array<{
    id: string;
    user_input: string;
    bot_response: string;
    price: number;
    created_at: string;
  }>;
  emailAddress: string;
  gmailApiKey: string;
}

const handler = async (req: Request): Promise<Response> => {
  if (req.method === "OPTIONS") {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { conversations, emailAddress, gmailApiKey }: ConversationLogRequest = await req.json();

    // Generate HTML email content
    const totalCost = conversations.reduce((sum, conv) => sum + conv.price, 0);
    const avgCost = conversations.length > 0 ? totalCost / conversations.length : 0;

    let conversationHtml = '';
    conversations.forEach((conv, index) => {
      conversationHtml += `
        <div style="border: 1px solid #e5e7eb; border-radius: 8px; padding: 16px; margin: 16px 0;">
          <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 12px;">
            <span style="font-size: 14px; color: #6b7280;">
              ${new Date(conv.created_at).toLocaleString()}
            </span>
            <span style="background: #f3f4f6; padding: 4px 8px; border-radius: 4px; font-size: 12px;">
              $${conv.price.toFixed(2)}
            </span>
          </div>
          <div style="margin-bottom: 8px;">
            <strong style="color: #2563eb;">User:</strong>
            <div style="background: #eff6ff; padding: 8px; border-radius: 4px; margin-top: 4px;">
              ${conv.user_input}
            </div>
          </div>
          <div>
            <strong style="color: #16a34a;">Bot:</strong>
            <div style="background: #f0fdf4; padding: 8px; border-radius: 4px; margin-top: 4px;">
              ${conv.bot_response}
            </div>
          </div>
        </div>
      `;
    });

    const emailHtml = `
      <!DOCTYPE html>
      <html>
        <head>
          <meta charset="utf-8">
          <title>Conversation Log Export</title>
        </head>
        <body style="font-family: Arial, sans-serif; line-height: 1.6; color: #374151; max-width: 800px; margin: 0 auto; padding: 20px;">
          <div style="text-align: center; margin-bottom: 30px;">
            <h1 style="color: #1f2937; margin-bottom: 10px;">Chatbot Conversation Log</h1>
            <p style="color: #6b7280;">Generated on ${new Date().toLocaleString()}</p>
          </div>
          
          <div style="background: #f9fafb; padding: 20px; border-radius: 8px; margin-bottom: 30px;">
            <h2 style="margin-top: 0; color: #1f2937;">Summary</h2>
            <div style="display: grid; grid-template-columns: repeat(3, 1fr); gap: 20px;">
              <div style="text-align: center;">
                <div style="font-size: 24px; font-weight: bold; color: #2563eb;">${conversations.length}</div>
                <div style="font-size: 14px; color: #6b7280;">Total Conversations</div>
              </div>
              <div style="text-align: center;">
                <div style="font-size: 24px; font-weight: bold; color: #16a34a;">$${totalCost.toFixed(2)}</div>
                <div style="font-size: 14px; color: #6b7280;">Total Cost</div>
              </div>
              <div style="text-align: center;">
                <div style="font-size: 24px; font-weight: bold; color: #7c3aed;">$${avgCost.toFixed(2)}</div>
                <div style="font-size: 14px; color: #6b7280;">Average Cost</div>
              </div>
            </div>
          </div>

          <h2 style="color: #1f2937;">Conversation History</h2>
          ${conversationHtml}

          <div style="margin-top: 30px; padding-top: 20px; border-top: 1px solid #e5e7eb; text-align: center; color: #6b7280; font-size: 14px;">
            <p>This log was generated by your Conversation Logger application.</p>
          </div>
        </body>
      </html>
    `;

    // For this demo, we'll simulate sending an email
    // In a real implementation, you would integrate with Gmail API here
    console.log('Email would be sent to:', emailAddress);
    console.log('Email content generated successfully');

    // Return success response
    return new Response(
      JSON.stringify({ 
        success: true, 
        message: 'Email sent successfully',
        conversationCount: conversations.length,
        totalCost: totalCost
      }),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
          ...corsHeaders,
        },
      }
    );
  } catch (error: any) {
    console.error("Error in send-conversation-log function:", error);
    return new Response(
      JSON.stringify({ error: error.message }),
      {
        status: 500,
        headers: { "Content-Type": "application/json", ...corsHeaders },
      }
    );
  }
};

serve(handler);
